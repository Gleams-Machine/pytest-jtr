{
  "collectors": [
    {
      "nodeid": "",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_create_report.py",
          "type": "Module"
        }
      ]
    },
    {
      "nodeid": "test_create_report.py",
      "outcome": "passed",
      "result": [
        {
          "lineno": 25,
          "nodeid": "test_create_report.py::test_pass",
          "type": "Function"
        },
        {
          "lineno": 28,
          "nodeid": "test_create_report.py::test_fail_with_fixture",
          "type": "Function"
        },
        {
          "lineno": 33,
          "nodeid": "test_create_report.py::test_xfail",
          "type": "Function"
        },
        {
          "lineno": 37,
          "nodeid": "test_create_report.py::test_xfail_but_passing",
          "type": "Function"
        },
        {
          "lineno": 41,
          "nodeid": "test_create_report.py::test_fail_during_setup",
          "type": "Function"
        },
        {
          "lineno": 44,
          "nodeid": "test_create_report.py::test_fail_during_teardown",
          "type": "Function"
        },
        {
          "lineno": 47,
          "nodeid": "test_create_report.py::test_skip",
          "type": "Function"
        },
        {
          "lineno": 51,
          "nodeid": "test_create_report.py::test_fail_nested",
          "type": "Function"
        },
        {
          "lineno": 67,
          "nodeid": "test_create_report.py::test_parametrized[1]",
          "type": "Function"
        },
        {
          "lineno": 67,
          "nodeid": "test_create_report.py::test_parametrized[2]",
          "type": "Function"
        }
      ]
    }
  ],
  "created": 1548185151.2609472,
  "duration": 0.04589128494262695,
  "environment": {
    "Packages": {
      "pluggy": "0.8.1",
      "py": "1.7.0",
      "pytest": "4.1.1"
    },
    "Platform": "Linux-1.23.45-arch1-1-ARCH-x86_64-with-arch",
    "Plugins": {
      "forked": "1.0.1",
      "json-report": "0.8.0",
      "metadata": "1.8.0",
      "xdist": "1.26.0"
    },
    "Python": "3.7.1"
  },
  "exitcode": 1,
  "root": "/tmp/pytest-of-user/pytest-40/test_create_report0",
  "summary": {
    "error": 2,
    "failed": 3,
    "passed": 2,
    "skipped": 1,
    "total": 10,
    "xfailed": 1,
    "xpassed": 1
  },
  "tests": [
    {
      "call": {
        "duration": 0.00010704994201660156,
        "outcome": "passed"
      },
      "keywords": [
        "test_create_report0",
        "test_create_report.py",
        "test_pass"
      ],
      "lineno": 25,
      "nodeid": "test_create_report.py::test_pass",
      "outcome": "passed",
      "setup": {
        "duration": 0.00013637542724609375,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0004982948303222656,
        "outcome": "passed"
      }
    },
    {
      "call": {
        "crash": {
          "lineno": 32,
          "message": "assert False",
          "path": "/tmp/pytest-of-user/pytest-40/test_create_report0/test_create_report.py"
        },
        "duration": 0.00015997886657714844,
        "longrepr": "setup_teardown_fixture = None\n\n    def test_fail_with_fixture(setup_teardown_fixture):\n        print('call')\n        print('callerr', file=sys.stderr)\n>       assert False\nE       assert False\n\ntest_create_report.py:32: AssertionError",
        "outcome": "failed",
        "stderr": "callerr\n",
        "stdout": "call\n",
        "traceback": [
          {
            "lineno": 32,
            "message": "AssertionError",
            "path": "test_create_report.py"
          }
        ]
      },
      "keywords": [
        "test_create_report0",
        "test_create_report.py",
        "test_fail_with_fixture"
      ],
      "lineno": 28,
      "nodeid": "test_create_report.py::test_fail_with_fixture",
      "outcome": "failed",
      "setup": {
        "duration": 0.0001995563507080078,
        "outcome": "passed",
        "stderr": "setuperr\n",
        "stdout": "setup\n"
      },
      "teardown": {
        "duration": 0.00015306472778320312,
        "outcome": "passed",
        "stderr": "teardownerr\n",
        "stdout": "teardown\n"
      }
    },
    {
      "call": {
        "crash": {
          "lineno": 36,
          "message": "assert False",
          "path": "/tmp/pytest-of-user/pytest-40/test_create_report0/test_create_report.py"
        },
        "duration": 0.00012755393981933594,
        "longrepr": "@pytest.mark.xfail(reason='testing xfail')\n    def test_xfail():\n>       assert False\nE       assert False\n\ntest_create_report.py:36: AssertionError",
        "outcome": "skipped",
        "traceback": [
          {
            "lineno": 36,
            "message": "AssertionError",
            "path": "test_create_report.py"
          }
        ]
      },
      "keywords": [
        "test_create_report0",
        "test_create_report.py",
        "pytestmark",
        "test_xfail",
        "xfail"
      ],
      "lineno": 33,
      "nodeid": "test_create_report.py::test_xfail",
      "outcome": "xfailed",
      "setup": {
        "duration": 0.0004124641418457031,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.00011134147644042969,
        "outcome": "passed"
      }
    },
    {
      "call": {
        "duration": 9.918212890625e-05,
        "outcome": "passed"
      },
      "keywords": [
        "test_create_report0",
        "test_create_report.py",
        "pytestmark",
        "xfail",
        "test_xfail_but_passing"
      ],
      "lineno": 37,
      "nodeid": "test_create_report.py::test_xfail_but_passing",
      "outcome": "xpassed",
      "setup": {
        "duration": 0.00011181831359863281,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 9.632110595703125e-05,
        "outcome": "passed"
      }
    },
    {
      "keywords": [
        "test_fail_during_setup",
        "test_create_report0",
        "test_create_report.py"
      ],
      "lineno": 41,
      "nodeid": "test_create_report.py::test_fail_during_setup",
      "outcome": "error",
      "setup": {
        "crash": {
          "lineno": 17,
          "message": "assert False",
          "path": "/tmp/pytest-of-user/pytest-40/test_create_report0/test_create_report.py"
        },
        "duration": 0.00017833709716796875,
        "longrepr": "request = <SubRequest 'fail_setup_fixture' for <Function test_fail_during_setup>>\n\n    @pytest.fixture\n    def fail_setup_fixture(request):\n>       assert False\nE       assert False\n\ntest_create_report.py:17: AssertionError",
        "outcome": "failed",
        "traceback": [
          {
            "lineno": 17,
            "message": "AssertionError",
            "path": "test_create_report.py"
          }
        ]
      },
      "teardown": {
        "duration": 0.00012302398681640625,
        "outcome": "passed"
      }
    },
    {
      "call": {
        "duration": 0.00010180473327636719,
        "outcome": "passed"
      },
      "keywords": [
        "test_create_report0",
        "test_create_report.py",
        "test_fail_during_teardown"
      ],
      "lineno": 44,
      "nodeid": "test_create_report.py::test_fail_during_teardown",
      "outcome": "error",
      "setup": {
        "duration": 0.00017595291137695312,
        "outcome": "passed"
      },
      "teardown": {
        "crash": {
          "lineno": 22,
          "message": "assert False",
          "path": "/tmp/pytest-of-user/pytest-40/test_create_report0/test_create_report.py"
        },
        "duration": 0.00014543533325195312,
        "longrepr": "def fn():\n>       assert False\nE       assert False\n\ntest_create_report.py:22: AssertionError",
        "outcome": "failed",
        "traceback": [
          {
            "lineno": 22,
            "message": "AssertionError",
            "path": "test_create_report.py"
          }
        ]
      }
    },
    {
      "keywords": [
        "skipif",
        "test_create_report0",
        "test_create_report.py",
        "pytestmark",
        "test_skip"
      ],
      "lineno": 47,
      "nodeid": "test_create_report.py::test_skip",
      "outcome": "skipped",
      "setup": {
        "duration": 9.298324584960938e-05,
        "longrepr": "('test_create_report.py', 47, 'Skipped: testing skip')",
        "outcome": "skipped"
      },
      "teardown": {
        "duration": 9.393692016601562e-05,
        "outcome": "passed"
      }
    },
    {
      "call": {
        "crash": {
          "lineno": 55,
          "message": "TypeError: unsupported operand type(s) for -: 'int' and 'NoneType'",
          "path": "/tmp/pytest-of-user/pytest-40/test_create_report0/test_create_report.py"
        },
        "duration": 0.00012683868408203125,
        "longrepr": "def test_fail_nested():\n        def baz(o=1):\n            c = 3\n            return 2 - c - None\n        def bar(m, n=5):\n            b = 2\n            print(m)\n            print('bar')\n            return baz()\n        def foo():\n            a = 1\n            print('foo')\n            v = [bar(x) for x in range(3)]\n            return v\n>       foo()\n\ntest_create_report.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_create_report.py:64: in foo\n    v = [bar(x) for x in range(3)]\ntest_create_report.py:64: in <listcomp>\n    v = [bar(x) for x in range(3)]\ntest_create_report.py:60: in bar\n    return baz()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\no = 1\n\n    def baz(o=1):\n        c = 3\n>       return 2 - c - None\nE       TypeError: unsupported operand type(s) for -: 'int' and 'NoneType'\n\ntest_create_report.py:55: TypeError",
        "outcome": "failed",
        "stdout": "foo\n0\nbar\n",
        "traceback": [
          {
            "lineno": 66,
            "message": "",
            "path": "test_create_report.py"
          },
          {
            "lineno": 64,
            "message": "in foo",
            "path": "test_create_report.py"
          },
          {
            "lineno": 64,
            "message": "in <listcomp>",
            "path": "test_create_report.py"
          },
          {
            "lineno": 60,
            "message": "in bar",
            "path": "test_create_report.py"
          },
          {
            "lineno": 55,
            "message": "TypeError",
            "path": "test_create_report.py"
          }
        ]
      },
      "keywords": [
        "test_fail_nested",
        "test_create_report0",
        "test_create_report.py"
      ],
      "lineno": 51,
      "nodeid": "test_create_report.py::test_fail_nested",
      "outcome": "failed",
      "setup": {
        "duration": 0.00010728836059570312,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.00011205673217773438,
        "outcome": "passed"
      }
    },
    {
      "call": {
        "duration": 0.00010347366333007812,
        "outcome": "passed"
      },
      "keywords": [
        "test_create_report0",
        "test_create_report.py",
        "test_parametrized[1]",
        "pytestmark",
        "1",
        "parametrize"
      ],
      "lineno": 67,
      "nodeid": "test_create_report.py::test_parametrized[1]",
      "outcome": "passed",
      "setup": {
        "duration": 0.0001621246337890625,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.00011467933654785156,
        "outcome": "passed"
      }
    },
    {
      "call": {
        "crash": {
          "lineno": 70,
          "message": "assert 2 == 1",
          "path": "/tmp/pytest-of-user/pytest-40/test_create_report0/test_create_report.py"
        },
        "duration": 0.00020122528076171875,
        "longrepr": "x = 2\n\n    @pytest.mark.parametrize('x', [1, 2])\n    def test_parametrized(x):\n>       assert x == 1\nE       assert 2 == 1\n\ntest_create_report.py:70: AssertionError",
        "outcome": "failed",
        "traceback": [
          {
            "lineno": 70,
            "message": "AssertionError",
            "path": "test_create_report.py"
          }
        ]
      },
      "keywords": [
        "2",
        "test_create_report0",
        "test_create_report.py",
        "pytestmark",
        "parametrize",
        "test_parametrized[2]"
      ],
      "lineno": 67,
      "nodeid": "test_create_report.py::test_parametrized[2]",
      "outcome": "failed",
      "setup": {
        "duration": 0.0001544952392578125,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.00012826919555664062,
        "outcome": "passed"
      }
    }
  ]
}
